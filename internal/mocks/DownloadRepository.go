// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	model "data-storage-svc/internal/model"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// DownloadRepository is an autogenerated mock type for the DownloadRepository type
type DownloadRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: download
func (_m *DownloadRepository) Create(download *model.Download) (*primitive.ObjectID, error) {
	ret := _m.Called(download)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *primitive.ObjectID
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Download) (*primitive.ObjectID, error)); ok {
		return rf(download)
	}
	if rf, ok := ret.Get(0).(func(*model.Download) *primitive.ObjectID); ok {
		r0 = rf(download)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*primitive.ObjectID)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Download) error); ok {
		r1 = rf(download)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: downloadId
func (_m *DownloadRepository) Get(downloadId *primitive.ObjectID) (*model.Download, error) {
	ret := _m.Called(downloadId)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.Download
	var r1 error
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) (*model.Download, error)); ok {
		return rf(downloadId)
	}
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) *model.Download); ok {
		r0 = rf(downloadId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Download)
		}
	}

	if rf, ok := ret.Get(1).(func(*primitive.ObjectID) error); ok {
		r1 = rf(downloadId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkAsReady provides a mock function with given fields: downloadId
func (_m *DownloadRepository) MarkAsReady(downloadId *primitive.ObjectID) error {
	ret := _m.Called(downloadId)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsReady")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) error); ok {
		r0 = rf(downloadId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDownloadRepository creates a new instance of DownloadRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDownloadRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DownloadRepository {
	mock := &DownloadRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
