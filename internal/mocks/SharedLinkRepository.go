// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	model "data-storage-svc/internal/model"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// SharedLinkRepository is an autogenerated mock type for the SharedLinkRepository type
type SharedLinkRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: sharedLink
func (_m *SharedLinkRepository) Create(sharedLink *model.SharedLink) (*primitive.ObjectID, error) {
	ret := _m.Called(sharedLink)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *primitive.ObjectID
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.SharedLink) (*primitive.ObjectID, error)); ok {
		return rf(sharedLink)
	}
	if rf, ok := ret.Get(0).(func(*model.SharedLink) *primitive.ObjectID); ok {
		r0 = rf(sharedLink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*primitive.ObjectID)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.SharedLink) error); ok {
		r1 = rf(sharedLink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: sharedLinkId
func (_m *SharedLinkRepository) Delete(sharedLinkId primitive.ObjectID) error {
	ret := _m.Called(sharedLinkId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) error); ok {
		r0 = rf(sharedLinkId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: sharedLinkId
func (_m *SharedLinkRepository) Get(sharedLinkId *primitive.ObjectID) (*model.SharedLink, error) {
	ret := _m.Called(sharedLinkId)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.SharedLink
	var r1 error
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) (*model.SharedLink, error)); ok {
		return rf(sharedLinkId)
	}
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) *model.SharedLink); ok {
		r0 = rf(sharedLinkId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SharedLink)
		}
	}

	if rf, ok := ret.Get(1).(func(*primitive.ObjectID) error); ok {
		r1 = rf(sharedLinkId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByToken provides a mock function with given fields: sharedLinkToken
func (_m *SharedLinkRepository) GetByToken(sharedLinkToken string) (*model.SharedLink, error) {
	ret := _m.Called(sharedLinkToken)

	if len(ret) == 0 {
		panic("no return value specified for GetByToken")
	}

	var r0 *model.SharedLink
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.SharedLink, error)); ok {
		return rf(sharedLinkToken)
	}
	if rf, ok := ret.Get(0).(func(string) *model.SharedLink); ok {
		r0 = rf(sharedLinkToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SharedLink)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sharedLinkToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: albumId
func (_m *SharedLinkRepository) List(albumId *primitive.ObjectID) ([]model.SharedLink, error) {
	ret := _m.Called(albumId)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []model.SharedLink
	var r1 error
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) ([]model.SharedLink, error)); ok {
		return rf(albumId)
	}
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) []model.SharedLink); ok {
		r0 = rf(albumId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.SharedLink)
		}
	}

	if rf, ok := ret.Get(1).(func(*primitive.ObjectID) error); ok {
		r1 = rf(albumId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: sharedLinkId, canEdit
func (_m *SharedLinkRepository) Update(sharedLinkId primitive.ObjectID, canEdit bool) error {
	ret := _m.Called(sharedLinkId, canEdit)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, bool) error); ok {
		r0 = rf(sharedLinkId, canEdit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSharedLinkRepository creates a new instance of SharedLinkRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSharedLinkRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SharedLinkRepository {
	mock := &SharedLinkRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
