// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	common "data-storage-svc/internal/api/common"

	gin "github.com/gin-gonic/gin"

	handler "github.com/tus/tusd/v2/pkg/handler"

	mock "github.com/stretchr/testify/mock"
)

// MediaEndpoint is an autogenerated mock type for the MediaEndpoint type
type MediaEndpoint struct {
	mock.Mock
}

// Delete provides a mock function with given fields: c
func (_m *MediaEndpoint) Delete(c *gin.Context) {
	_m.Called(c)
}

// Get provides a mock function with given fields: c
func (_m *MediaEndpoint) Get(c *gin.Context) {
	_m.Called(c)
}

// GetCommonMiddlewares provides a mock function with no fields
func (_m *MediaEndpoint) GetCommonMiddlewares() []gin.HandlerFunc {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCommonMiddlewares")
	}

	var r0 []gin.HandlerFunc
	if rf, ok := ret.Get(0).(func() []gin.HandlerFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gin.HandlerFunc)
		}
	}

	return r0
}

// GetEndpointName provides a mock function with no fields
func (_m *MediaEndpoint) GetEndpointName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEndpointName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetEndpointsList provides a mock function with no fields
func (_m *MediaEndpoint) GetEndpointsList() map[common.MethodPath][]gin.HandlerFunc {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEndpointsList")
	}

	var r0 map[common.MethodPath][]gin.HandlerFunc
	if rf, ok := ret.Get(0).(func() map[common.MethodPath][]gin.HandlerFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[common.MethodPath][]gin.HandlerFunc)
		}
	}

	return r0
}

// GetGroupUrl provides a mock function with no fields
func (_m *MediaEndpoint) GetGroupUrl() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGroupUrl")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetMetaData provides a mock function with given fields: c
func (_m *MediaEndpoint) GetMetaData(c *gin.Context) {
	_m.Called(c)
}

// GetPermissionsManager provides a mock function with no fields
func (_m *MediaEndpoint) GetPermissionsManager() common.PermissionsManager {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionsManager")
	}

	var r0 common.PermissionsManager
	if rf, ok := ret.Get(0).(func() common.PermissionsManager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.PermissionsManager)
		}
	}

	return r0
}

// List provides a mock function with given fields: c
func (_m *MediaEndpoint) List(c *gin.Context) {
	_m.Called(c)
}

// PreCreate provides a mock function with given fields: hook
func (_m *MediaEndpoint) PreCreate(hook handler.HookEvent) (handler.HTTPResponse, handler.FileInfoChanges, error) {
	ret := _m.Called(hook)

	if len(ret) == 0 {
		panic("no return value specified for PreCreate")
	}

	var r0 handler.HTTPResponse
	var r1 handler.FileInfoChanges
	var r2 error
	if rf, ok := ret.Get(0).(func(handler.HookEvent) (handler.HTTPResponse, handler.FileInfoChanges, error)); ok {
		return rf(hook)
	}
	if rf, ok := ret.Get(0).(func(handler.HookEvent) handler.HTTPResponse); ok {
		r0 = rf(hook)
	} else {
		r0 = ret.Get(0).(handler.HTTPResponse)
	}

	if rf, ok := ret.Get(1).(func(handler.HookEvent) handler.FileInfoChanges); ok {
		r1 = rf(hook)
	} else {
		r1 = ret.Get(1).(handler.FileInfoChanges)
	}

	if rf, ok := ret.Get(2).(func(handler.HookEvent) error); ok {
		r2 = rf(hook)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PreFinish provides a mock function with given fields: hook
func (_m *MediaEndpoint) PreFinish(hook handler.HookEvent) (handler.HTTPResponse, error) {
	ret := _m.Called(hook)

	if len(ret) == 0 {
		panic("no return value specified for PreFinish")
	}

	var r0 handler.HTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(handler.HookEvent) (handler.HTTPResponse, error)); ok {
		return rf(hook)
	}
	if rf, ok := ret.Get(0).(func(handler.HookEvent) handler.HTTPResponse); ok {
		r0 = rf(hook)
	} else {
		r0 = ret.Get(0).(handler.HTTPResponse)
	}

	if rf, ok := ret.Get(1).(func(handler.HookEvent) error); ok {
		r1 = rf(hook)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMediaEndpoint creates a new instance of MediaEndpoint. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMediaEndpoint(t interface {
	mock.TestingT
	Cleanup(func())
}) *MediaEndpoint {
	mock := &MediaEndpoint{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
