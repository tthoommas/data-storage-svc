// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	model "data-storage-svc/internal/model"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// AlbumAccessRepository is an autogenerated mock type for the AlbumAccessRepository type
type AlbumAccessRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: userId, albumId, canEdit
func (_m *AlbumAccessRepository) Create(userId *primitive.ObjectID, albumId *primitive.ObjectID, canEdit bool) error {
	ret := _m.Called(userId, albumId, canEdit)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID, *primitive.ObjectID, bool) error); ok {
		r0 = rf(userId, albumId, canEdit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: userId, albumId
func (_m *AlbumAccessRepository) Get(userId *primitive.ObjectID, albumId *primitive.ObjectID) (*model.UserAlbumAccess, error) {
	ret := _m.Called(userId, albumId)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.UserAlbumAccess
	var r1 error
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID, *primitive.ObjectID) (*model.UserAlbumAccess, error)); ok {
		return rf(userId, albumId)
	}
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID, *primitive.ObjectID) *model.UserAlbumAccess); ok {
		r0 = rf(userId, albumId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserAlbumAccess)
		}
	}

	if rf, ok := ret.Get(1).(func(*primitive.ObjectID, *primitive.ObjectID) error); ok {
		r1 = rf(userId, albumId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllByAlbum provides a mock function with given fields: albumId
func (_m *AlbumAccessRepository) GetAllByAlbum(albumId *primitive.ObjectID) ([]model.UserAlbumAccess, error) {
	ret := _m.Called(albumId)

	if len(ret) == 0 {
		panic("no return value specified for GetAllByAlbum")
	}

	var r0 []model.UserAlbumAccess
	var r1 error
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) ([]model.UserAlbumAccess, error)); ok {
		return rf(albumId)
	}
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) []model.UserAlbumAccess); ok {
		r0 = rf(albumId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserAlbumAccess)
		}
	}

	if rf, ok := ret.Get(1).(func(*primitive.ObjectID) error); ok {
		r1 = rf(albumId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllByUser provides a mock function with given fields: userId
func (_m *AlbumAccessRepository) GetAllByUser(userId *primitive.ObjectID) ([]model.UserAlbumAccess, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetAllByUser")
	}

	var r0 []model.UserAlbumAccess
	var r1 error
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) ([]model.UserAlbumAccess, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) []model.UserAlbumAccess); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserAlbumAccess)
		}
	}

	if rf, ok := ret.Get(1).(func(*primitive.ObjectID) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: userId, albumId
func (_m *AlbumAccessRepository) Remove(userId *primitive.ObjectID, albumId *primitive.ObjectID) error {
	ret := _m.Called(userId, albumId)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID, *primitive.ObjectID) error); ok {
		r0 = rf(userId, albumId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveAllAccesses provides a mock function with given fields: albumId
func (_m *AlbumAccessRepository) RemoveAllAccesses(albumId *primitive.ObjectID) error {
	ret := _m.Called(albumId)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAllAccesses")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) error); ok {
		r0 = rf(albumId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAlbumAccessRepository creates a new instance of AlbumAccessRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAlbumAccessRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AlbumAccessRepository {
	mock := &AlbumAccessRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
