// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	model "data-storage-svc/internal/model"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// AlbumRepository is an autogenerated mock type for the AlbumRepository type
type AlbumRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: album
func (_m *AlbumRepository) Create(album *model.Album) (*primitive.ObjectID, error) {
	ret := _m.Called(album)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *primitive.ObjectID
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Album) (*primitive.ObjectID, error)); ok {
		return rf(album)
	}
	if rf, ok := ret.Get(0).(func(*model.Album) *primitive.ObjectID); ok {
		r0 = rf(album)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*primitive.ObjectID)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Album) error); ok {
		r1 = rf(album)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: albumId
func (_m *AlbumRepository) Delete(albumId *primitive.ObjectID) error {
	ret := _m.Called(albumId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) error); ok {
		r0 = rf(albumId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: id
func (_m *AlbumRepository) GetById(id primitive.ObjectID) (*model.Album, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *model.Album
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) (*model.Album, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *model.Album); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Album)
		}
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: album
func (_m *AlbumRepository) Update(album *model.Album) error {
	ret := _m.Called(album)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Album) error); ok {
		r0 = rf(album)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAlbumRepository creates a new instance of AlbumRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAlbumRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AlbumRepository {
	mock := &AlbumRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
