// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	model "data-storage-svc/internal/model"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	utils "data-storage-svc/internal/utils"
)

// AlbumService is an autogenerated mock type for the AlbumService type
type AlbumService struct {
	mock.Mock
}

// AddMedia provides a mock function with given fields: mediaInAlbum
func (_m *AlbumService) AddMedia(mediaInAlbum *model.MediaInAlbum) utils.ServiceError {
	ret := _m.Called(mediaInAlbum)

	if len(ret) == 0 {
		panic("no return value specified for AddMedia")
	}

	var r0 utils.ServiceError
	if rf, ok := ret.Get(0).(func(*model.MediaInAlbum) utils.ServiceError); ok {
		r0 = rf(mediaInAlbum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(utils.ServiceError)
		}
	}

	return r0
}

// Create provides a mock function with given fields: album
func (_m *AlbumService) Create(album *model.Album) (*primitive.ObjectID, utils.ServiceError) {
	ret := _m.Called(album)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *primitive.ObjectID
	var r1 utils.ServiceError
	if rf, ok := ret.Get(0).(func(*model.Album) (*primitive.ObjectID, utils.ServiceError)); ok {
		return rf(album)
	}
	if rf, ok := ret.Get(0).(func(*model.Album) *primitive.ObjectID); ok {
		r0 = rf(album)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*primitive.ObjectID)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Album) utils.ServiceError); ok {
		r1 = rf(album)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.ServiceError)
		}
	}

	return r0, r1
}

// Delete provides a mock function with given fields: albumId
func (_m *AlbumService) Delete(albumId *primitive.ObjectID) utils.ServiceError {
	ret := _m.Called(albumId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 utils.ServiceError
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) utils.ServiceError); ok {
		r0 = rf(albumId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(utils.ServiceError)
		}
	}

	return r0
}

// DeleteMedia provides a mock function with given fields: mediaId, albumId
func (_m *AlbumService) DeleteMedia(mediaId *primitive.ObjectID, albumId *primitive.ObjectID) utils.ServiceError {
	ret := _m.Called(mediaId, albumId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMedia")
	}

	var r0 utils.ServiceError
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID, *primitive.ObjectID) utils.ServiceError); ok {
		r0 = rf(mediaId, albumId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(utils.ServiceError)
		}
	}

	return r0
}

// DeleteMediaFromAll provides a mock function with given fields: mediaId
func (_m *AlbumService) DeleteMediaFromAll(mediaId *primitive.ObjectID) utils.ServiceError {
	ret := _m.Called(mediaId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMediaFromAll")
	}

	var r0 utils.ServiceError
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) utils.ServiceError); ok {
		r0 = rf(mediaId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(utils.ServiceError)
		}
	}

	return r0
}

// GetAlbumById provides a mock function with given fields: albumId
func (_m *AlbumService) GetAlbumById(albumId *primitive.ObjectID) (*model.Album, utils.ServiceError) {
	ret := _m.Called(albumId)

	if len(ret) == 0 {
		panic("no return value specified for GetAlbumById")
	}

	var r0 *model.Album
	var r1 utils.ServiceError
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) (*model.Album, utils.ServiceError)); ok {
		return rf(albumId)
	}
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) *model.Album); ok {
		r0 = rf(albumId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Album)
		}
	}

	if rf, ok := ret.Get(1).(func(*primitive.ObjectID) utils.ServiceError); ok {
		r1 = rf(albumId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.ServiceError)
		}
	}

	return r0, r1
}

// GetAlbumThumbnail provides a mock function with given fields: albumId
func (_m *AlbumService) GetAlbumThumbnail(albumId *primitive.ObjectID) (*string, []byte, utils.ServiceError) {
	ret := _m.Called(albumId)

	if len(ret) == 0 {
		panic("no return value specified for GetAlbumThumbnail")
	}

	var r0 *string
	var r1 []byte
	var r2 utils.ServiceError
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) (*string, []byte, utils.ServiceError)); ok {
		return rf(albumId)
	}
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) *string); ok {
		r0 = rf(albumId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(*primitive.ObjectID) []byte); ok {
		r1 = rf(albumId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(*primitive.ObjectID) utils.ServiceError); ok {
		r2 = rf(albumId)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(utils.ServiceError)
		}
	}

	return r0, r1, r2
}

// GetAllAlbumsForUser provides a mock function with given fields: userId
func (_m *AlbumService) GetAllAlbumsForUser(userId *primitive.ObjectID) ([]model.Album, utils.ServiceError) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetAllAlbumsForUser")
	}

	var r0 []model.Album
	var r1 utils.ServiceError
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) ([]model.Album, utils.ServiceError)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) []model.Album); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Album)
		}
	}

	if rf, ok := ret.Get(1).(func(*primitive.ObjectID) utils.ServiceError); ok {
		r1 = rf(userId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.ServiceError)
		}
	}

	return r0, r1
}

// GetMedias provides a mock function with given fields: albumId
func (_m *AlbumService) GetMedias(albumId *primitive.ObjectID) ([]model.MediaInAlbum, utils.ServiceError) {
	ret := _m.Called(albumId)

	if len(ret) == 0 {
		panic("no return value specified for GetMedias")
	}

	var r0 []model.MediaInAlbum
	var r1 utils.ServiceError
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) ([]model.MediaInAlbum, utils.ServiceError)); ok {
		return rf(albumId)
	}
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) []model.MediaInAlbum); ok {
		r0 = rf(albumId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.MediaInAlbum)
		}
	}

	if rf, ok := ret.Get(1).(func(*primitive.ObjectID) utils.ServiceError); ok {
		r1 = rf(albumId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.ServiceError)
		}
	}

	return r0, r1
}

// NewAlbumService creates a new instance of AlbumService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAlbumService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AlbumService {
	mock := &AlbumService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
