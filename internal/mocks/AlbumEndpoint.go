// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	common "data-storage-svc/internal/api/common"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// AlbumEndpoint is an autogenerated mock type for the AlbumEndpoint type
type AlbumEndpoint struct {
	mock.Mock
}

// AddMedia provides a mock function with given fields: c
func (_m *AlbumEndpoint) AddMedia(c *gin.Context) {
	_m.Called(c)
}

// Can provides a mock function with given fields: c
func (_m *AlbumEndpoint) Can(c *gin.Context) {
	_m.Called(c)
}

// Create provides a mock function with given fields: c
func (_m *AlbumEndpoint) Create(c *gin.Context) {
	_m.Called(c)
}

// CreateAccess provides a mock function with given fields: c
func (_m *AlbumEndpoint) CreateAccess(c *gin.Context) {
	_m.Called(c)
}

// Delete provides a mock function with given fields: c
func (_m *AlbumEndpoint) Delete(c *gin.Context) {
	_m.Called(c)
}

// DeleteMedia provides a mock function with given fields: c
func (_m *AlbumEndpoint) DeleteMedia(c *gin.Context) {
	_m.Called(c)
}

// GetAlbumThumbnail provides a mock function with given fields: c
func (_m *AlbumEndpoint) GetAlbumThumbnail(c *gin.Context) {
	_m.Called(c)
}

// GetAll provides a mock function with given fields: c
func (_m *AlbumEndpoint) GetAll(c *gin.Context) {
	_m.Called(c)
}

// GetAllAccesses provides a mock function with given fields: c
func (_m *AlbumEndpoint) GetAllAccesses(c *gin.Context) {
	_m.Called(c)
}

// GetCommonMiddlewares provides a mock function with no fields
func (_m *AlbumEndpoint) GetCommonMiddlewares() []gin.HandlerFunc {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCommonMiddlewares")
	}

	var r0 []gin.HandlerFunc
	if rf, ok := ret.Get(0).(func() []gin.HandlerFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gin.HandlerFunc)
		}
	}

	return r0
}

// GetEndpointName provides a mock function with no fields
func (_m *AlbumEndpoint) GetEndpointName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEndpointName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetEndpointsList provides a mock function with no fields
func (_m *AlbumEndpoint) GetEndpointsList() map[common.MethodPath][]gin.HandlerFunc {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEndpointsList")
	}

	var r0 map[common.MethodPath][]gin.HandlerFunc
	if rf, ok := ret.Get(0).(func() map[common.MethodPath][]gin.HandlerFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[common.MethodPath][]gin.HandlerFunc)
		}
	}

	return r0
}

// GetGroupUrl provides a mock function with no fields
func (_m *AlbumEndpoint) GetGroupUrl() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGroupUrl")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetMedias provides a mock function with given fields: c
func (_m *AlbumEndpoint) GetMedias(c *gin.Context) {
	_m.Called(c)
}

// GetOne provides a mock function with given fields: c
func (_m *AlbumEndpoint) GetOne(c *gin.Context) {
	_m.Called(c)
}

// GetPermissionsManager provides a mock function with no fields
func (_m *AlbumEndpoint) GetPermissionsManager() common.PermissionsManager {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionsManager")
	}

	var r0 common.PermissionsManager
	if rf, ok := ret.Get(0).(func() common.PermissionsManager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.PermissionsManager)
		}
	}

	return r0
}

// NewAlbumEndpoint creates a new instance of AlbumEndpoint. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAlbumEndpoint(t interface {
	mock.TestingT
	Cleanup(func())
}) *AlbumEndpoint {
	mock := &AlbumEndpoint{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
