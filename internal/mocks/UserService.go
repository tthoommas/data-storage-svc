// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	model "data-storage-svc/internal/model"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	utils "data-storage-svc/internal/utils"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// Create provides a mock function with given fields: email, password
func (_m *UserService) Create(email string, password string) (*primitive.ObjectID, utils.ServiceError) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *primitive.ObjectID
	var r1 utils.ServiceError
	if rf, ok := ret.Get(0).(func(string, string) (*primitive.ObjectID, utils.ServiceError)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *primitive.ObjectID); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*primitive.ObjectID)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) utils.ServiceError); ok {
		r1 = rf(email, password)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.ServiceError)
		}
	}

	return r0, r1
}

// GenerateToken provides a mock function with given fields: email, password
func (_m *UserService) GenerateToken(email string, password string) (*string, utils.ServiceError) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 *string
	var r1 utils.ServiceError
	if rf, ok := ret.Get(0).(func(string, string) (*string, utils.ServiceError)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *string); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) utils.ServiceError); ok {
		r1 = rf(email, password)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.ServiceError)
		}
	}

	return r0, r1
}

// GetAll provides a mock function with no fields
func (_m *UserService) GetAll() ([]model.User, utils.ServiceError) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []model.User
	var r1 utils.ServiceError
	if rf, ok := ret.Get(0).(func() ([]model.User, utils.ServiceError)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	if rf, ok := ret.Get(1).(func() utils.ServiceError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.ServiceError)
		}
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: email
func (_m *UserService) GetByEmail(email string) (*model.User, utils.ServiceError) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *model.User
	var r1 utils.ServiceError
	if rf, ok := ret.Get(0).(func(string) (*model.User, utils.ServiceError)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) utils.ServiceError); ok {
		r1 = rf(email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.ServiceError)
		}
	}

	return r0, r1
}

// GetById provides a mock function with given fields: userId
func (_m *UserService) GetById(userId primitive.ObjectID) (*model.User, utils.ServiceError) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *model.User
	var r1 utils.ServiceError
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) (*model.User, utils.ServiceError)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *model.User); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID) utils.ServiceError); ok {
		r1 = rf(userId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.ServiceError)
		}
	}

	return r0, r1
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
