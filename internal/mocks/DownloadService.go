// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	model "data-storage-svc/internal/model"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	utils "data-storage-svc/internal/utils"
)

// DownloadService is an autogenerated mock type for the DownloadService type
type DownloadService struct {
	mock.Mock
}

// Get provides a mock function with given fields: downloadId
func (_m *DownloadService) Get(downloadId *primitive.ObjectID) (*model.Download, utils.ServiceError) {
	ret := _m.Called(downloadId)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.Download
	var r1 utils.ServiceError
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) (*model.Download, utils.ServiceError)); ok {
		return rf(downloadId)
	}
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) *model.Download); ok {
		r0 = rf(downloadId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Download)
		}
	}

	if rf, ok := ret.Get(1).(func(*primitive.ObjectID) utils.ServiceError); ok {
		r1 = rf(downloadId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.ServiceError)
		}
	}

	return r0, r1
}

// GetData provides a mock function with given fields: downloadId
func (_m *DownloadService) GetData(downloadId *primitive.ObjectID) ([]byte, utils.ServiceError) {
	ret := _m.Called(downloadId)

	if len(ret) == 0 {
		panic("no return value specified for GetData")
	}

	var r0 []byte
	var r1 utils.ServiceError
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) ([]byte, utils.ServiceError)); ok {
		return rf(downloadId)
	}
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) []byte); ok {
		r0 = rf(downloadId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*primitive.ObjectID) utils.ServiceError); ok {
		r1 = rf(downloadId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.ServiceError)
		}
	}

	return r0, r1
}

// InitDownload provides a mock function with given fields: albumId, initiator, isInitatedBySharedLink
func (_m *DownloadService) InitDownload(albumId *primitive.ObjectID, initiator *primitive.ObjectID, isInitatedBySharedLink bool) (*primitive.ObjectID, utils.ServiceError) {
	ret := _m.Called(albumId, initiator, isInitatedBySharedLink)

	if len(ret) == 0 {
		panic("no return value specified for InitDownload")
	}

	var r0 *primitive.ObjectID
	var r1 utils.ServiceError
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID, *primitive.ObjectID, bool) (*primitive.ObjectID, utils.ServiceError)); ok {
		return rf(albumId, initiator, isInitatedBySharedLink)
	}
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID, *primitive.ObjectID, bool) *primitive.ObjectID); ok {
		r0 = rf(albumId, initiator, isInitatedBySharedLink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*primitive.ObjectID)
		}
	}

	if rf, ok := ret.Get(1).(func(*primitive.ObjectID, *primitive.ObjectID, bool) utils.ServiceError); ok {
		r1 = rf(albumId, initiator, isInitatedBySharedLink)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.ServiceError)
		}
	}

	return r0, r1
}

// IsReady provides a mock function with given fields: downloadId
func (_m *DownloadService) IsReady(downloadId *primitive.ObjectID) bool {
	ret := _m.Called(downloadId)

	if len(ret) == 0 {
		panic("no return value specified for IsReady")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) bool); ok {
		r0 = rf(downloadId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewDownloadService creates a new instance of DownloadService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDownloadService(t interface {
	mock.TestingT
	Cleanup(func())
}) *DownloadService {
	mock := &DownloadService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
