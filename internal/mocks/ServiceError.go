// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// ServiceError is an autogenerated mock type for the ServiceError type
type ServiceError struct {
	mock.Mock
}

// Apply provides a mock function with given fields: c
func (_m *ServiceError) Apply(c *gin.Context) {
	_m.Called(c)
}

// GetCode provides a mock function with no fields
func (_m *ServiceError) GetCode() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCode")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetMessage provides a mock function with no fields
func (_m *ServiceError) GetMessage() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMessage")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewServiceError creates a new instance of ServiceError. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceError(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceError {
	mock := &ServiceError{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
