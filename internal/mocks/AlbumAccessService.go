// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	model "data-storage-svc/internal/model"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	utils "data-storage-svc/internal/utils"
)

// AlbumAccessService is an autogenerated mock type for the AlbumAccessService type
type AlbumAccessService struct {
	mock.Mock
}

// GetAllAccesses provides a mock function with given fields: albumId
func (_m *AlbumAccessService) GetAllAccesses(albumId *primitive.ObjectID) ([]model.UserAlbumAccess, utils.ServiceError) {
	ret := _m.Called(albumId)

	if len(ret) == 0 {
		panic("no return value specified for GetAllAccesses")
	}

	var r0 []model.UserAlbumAccess
	var r1 utils.ServiceError
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) ([]model.UserAlbumAccess, utils.ServiceError)); ok {
		return rf(albumId)
	}
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) []model.UserAlbumAccess); ok {
		r0 = rf(albumId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserAlbumAccess)
		}
	}

	if rf, ok := ret.Get(1).(func(*primitive.ObjectID) utils.ServiceError); ok {
		r1 = rf(albumId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.ServiceError)
		}
	}

	return r0, r1
}

// GetAllForUser provides a mock function with given fields: userId
func (_m *AlbumAccessService) GetAllForUser(userId *primitive.ObjectID) ([]model.UserAlbumAccess, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetAllForUser")
	}

	var r0 []model.UserAlbumAccess
	var r1 error
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) ([]model.UserAlbumAccess, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) []model.UserAlbumAccess); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserAlbumAccess)
		}
	}

	if rf, ok := ret.Get(1).(func(*primitive.ObjectID) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrantAccess provides a mock function with given fields: userId, albumId, canEdit
func (_m *AlbumAccessService) GrantAccess(userId *primitive.ObjectID, albumId *primitive.ObjectID, canEdit bool) utils.ServiceError {
	ret := _m.Called(userId, albumId, canEdit)

	if len(ret) == 0 {
		panic("no return value specified for GrantAccess")
	}

	var r0 utils.ServiceError
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID, *primitive.ObjectID, bool) utils.ServiceError); ok {
		r0 = rf(userId, albumId, canEdit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(utils.ServiceError)
		}
	}

	return r0
}

// RevokeAccess provides a mock function with given fields: userId, albumId
func (_m *AlbumAccessService) RevokeAccess(userId *primitive.ObjectID, albumId *primitive.ObjectID) utils.ServiceError {
	ret := _m.Called(userId, albumId)

	if len(ret) == 0 {
		panic("no return value specified for RevokeAccess")
	}

	var r0 utils.ServiceError
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID, *primitive.ObjectID) utils.ServiceError); ok {
		r0 = rf(userId, albumId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(utils.ServiceError)
		}
	}

	return r0
}

// RevokeAllAccesses provides a mock function with given fields: albumId
func (_m *AlbumAccessService) RevokeAllAccesses(albumId *primitive.ObjectID) error {
	ret := _m.Called(albumId)

	if len(ret) == 0 {
		panic("no return value specified for RevokeAllAccesses")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) error); ok {
		r0 = rf(albumId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAlbumAccessService creates a new instance of AlbumAccessService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAlbumAccessService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AlbumAccessService {
	mock := &AlbumAccessService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
