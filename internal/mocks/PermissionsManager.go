// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	model "data-storage-svc/internal/model"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// PermissionsManager is an autogenerated mock type for the PermissionsManager type
type PermissionsManager struct {
	mock.Mock
}

// CanConsumeDownload provides a mock function with given fields: user, downloadId, sharedLink
func (_m *PermissionsManager) CanConsumeDownload(user *model.User, downloadId *primitive.ObjectID, sharedLink *model.SharedLink) bool {
	ret := _m.Called(user, downloadId, sharedLink)

	if len(ret) == 0 {
		panic("no return value specified for CanConsumeDownload")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.User, *primitive.ObjectID, *model.SharedLink) bool); ok {
		r0 = rf(user, downloadId, sharedLink)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CanCreateAlbum provides a mock function with given fields: user
func (_m *PermissionsManager) CanCreateAlbum(user *model.User) bool {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CanCreateAlbum")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.User) bool); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CanCreateMedia provides a mock function with given fields: user, sharedLink
func (_m *PermissionsManager) CanCreateMedia(user *model.User, sharedLink *model.SharedLink) bool {
	ret := _m.Called(user, sharedLink)

	if len(ret) == 0 {
		panic("no return value specified for CanCreateMedia")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.User, *model.SharedLink) bool); ok {
		r0 = rf(user, sharedLink)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CanCreateSharedLink provides a mock function with given fields: user, albumId
func (_m *PermissionsManager) CanCreateSharedLink(user *model.User, albumId *primitive.ObjectID) bool {
	ret := _m.Called(user, albumId)

	if len(ret) == 0 {
		panic("no return value specified for CanCreateSharedLink")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.User, *primitive.ObjectID) bool); ok {
		r0 = rf(user, albumId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CanCreateUser provides a mock function with given fields: user
func (_m *PermissionsManager) CanCreateUser(user *model.User) bool {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CanCreateUser")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.User) bool); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CanDeleteAlbum provides a mock function with given fields: user, albumId
func (_m *PermissionsManager) CanDeleteAlbum(user *model.User, albumId *primitive.ObjectID) bool {
	ret := _m.Called(user, albumId)

	if len(ret) == 0 {
		panic("no return value specified for CanDeleteAlbum")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.User, *primitive.ObjectID) bool); ok {
		r0 = rf(user, albumId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CanDeleteMedia provides a mock function with given fields: user, mediaId
func (_m *PermissionsManager) CanDeleteMedia(user *model.User, mediaId *primitive.ObjectID) bool {
	ret := _m.Called(user, mediaId)

	if len(ret) == 0 {
		panic("no return value specified for CanDeleteMedia")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.User, *primitive.ObjectID) bool); ok {
		r0 = rf(user, mediaId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CanDeleteSharedLink provides a mock function with given fields: user, sharedLink
func (_m *PermissionsManager) CanDeleteSharedLink(user *model.User, sharedLink *model.SharedLink) bool {
	ret := _m.Called(user, sharedLink)

	if len(ret) == 0 {
		panic("no return value specified for CanDeleteSharedLink")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.User, *model.SharedLink) bool); ok {
		r0 = rf(user, sharedLink)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CanEditAlbumAccesses provides a mock function with given fields: user, albumId
func (_m *PermissionsManager) CanEditAlbumAccesses(user *model.User, albumId *primitive.ObjectID) bool {
	ret := _m.Called(user, albumId)

	if len(ret) == 0 {
		panic("no return value specified for CanEditAlbumAccesses")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.User, *primitive.ObjectID) bool); ok {
		r0 = rf(user, albumId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CanEditMediasInAlbum provides a mock function with given fields: user, albumId, sharedLink
func (_m *PermissionsManager) CanEditMediasInAlbum(user *model.User, albumId *primitive.ObjectID, sharedLink *model.SharedLink) bool {
	ret := _m.Called(user, albumId, sharedLink)

	if len(ret) == 0 {
		panic("no return value specified for CanEditMediasInAlbum")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.User, *primitive.ObjectID, *model.SharedLink) bool); ok {
		r0 = rf(user, albumId, sharedLink)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CanGetAlbum provides a mock function with given fields: user, albumId, sharedLink
func (_m *PermissionsManager) CanGetAlbum(user *model.User, albumId *primitive.ObjectID, sharedLink *model.SharedLink) bool {
	ret := _m.Called(user, albumId, sharedLink)

	if len(ret) == 0 {
		panic("no return value specified for CanGetAlbum")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.User, *primitive.ObjectID, *model.SharedLink) bool); ok {
		r0 = rf(user, albumId, sharedLink)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CanGetAllMediasForAlbum provides a mock function with given fields: user, albumId, sharedLink
func (_m *PermissionsManager) CanGetAllMediasForAlbum(user *model.User, albumId *primitive.ObjectID, sharedLink *model.SharedLink) bool {
	ret := _m.Called(user, albumId, sharedLink)

	if len(ret) == 0 {
		panic("no return value specified for CanGetAllMediasForAlbum")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.User, *primitive.ObjectID, *model.SharedLink) bool); ok {
		r0 = rf(user, albumId, sharedLink)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CanGetDownload provides a mock function with given fields: user, downloadId, sharedLink
func (_m *PermissionsManager) CanGetDownload(user *model.User, downloadId *primitive.ObjectID, sharedLink *model.SharedLink) bool {
	ret := _m.Called(user, downloadId, sharedLink)

	if len(ret) == 0 {
		panic("no return value specified for CanGetDownload")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.User, *primitive.ObjectID, *model.SharedLink) bool); ok {
		r0 = rf(user, downloadId, sharedLink)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CanGetMedia provides a mock function with given fields: user, mediaId, sharedLink
func (_m *PermissionsManager) CanGetMedia(user *model.User, mediaId *primitive.ObjectID, sharedLink *model.SharedLink) bool {
	ret := _m.Called(user, mediaId, sharedLink)

	if len(ret) == 0 {
		panic("no return value specified for CanGetMedia")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.User, *primitive.ObjectID, *model.SharedLink) bool); ok {
		r0 = rf(user, mediaId, sharedLink)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CanInitDownloadForAlbum provides a mock function with given fields: user, albumId, sharedLink
func (_m *PermissionsManager) CanInitDownloadForAlbum(user *model.User, albumId *primitive.ObjectID, sharedLink *model.SharedLink) bool {
	ret := _m.Called(user, albumId, sharedLink)

	if len(ret) == 0 {
		panic("no return value specified for CanInitDownloadForAlbum")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.User, *primitive.ObjectID, *model.SharedLink) bool); ok {
		r0 = rf(user, albumId, sharedLink)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CanListAlbumAccesses provides a mock function with given fields: user, albumId
func (_m *PermissionsManager) CanListAlbumAccesses(user *model.User, albumId *primitive.ObjectID) bool {
	ret := _m.Called(user, albumId)

	if len(ret) == 0 {
		panic("no return value specified for CanListAlbumAccesses")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.User, *primitive.ObjectID) bool); ok {
		r0 = rf(user, albumId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CanListSharedLinks provides a mock function with given fields: user, albumId
func (_m *PermissionsManager) CanListSharedLinks(user *model.User, albumId *primitive.ObjectID) bool {
	ret := _m.Called(user, albumId)

	if len(ret) == 0 {
		panic("no return value specified for CanListSharedLinks")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.User, *primitive.ObjectID) bool); ok {
		r0 = rf(user, albumId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CanListUsers provides a mock function with given fields: user
func (_m *PermissionsManager) CanListUsers(user *model.User) bool {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CanListUsers")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.User) bool); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CanUpdateSharedLink provides a mock function with given fields: user, sharedLink
func (_m *PermissionsManager) CanUpdateSharedLink(user *model.User, sharedLink *model.SharedLink) bool {
	ret := _m.Called(user, sharedLink)

	if len(ret) == 0 {
		panic("no return value specified for CanUpdateSharedLink")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.User, *model.SharedLink) bool); ok {
		r0 = rf(user, sharedLink)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewPermissionsManager creates a new instance of PermissionsManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPermissionsManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *PermissionsManager {
	mock := &PermissionsManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
