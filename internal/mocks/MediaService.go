// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	model "data-storage-svc/internal/model"
	io "io"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	utils "data-storage-svc/internal/utils"
)

// MediaService is an autogenerated mock type for the MediaService type
type MediaService struct {
	mock.Mock
}

// Create provides a mock function with given fields: fileName, uploader, uploadedViaSharedLink, data
func (_m *MediaService) Create(fileName string, uploader *primitive.ObjectID, uploadedViaSharedLink bool, data *io.ReadCloser) (*primitive.ObjectID, utils.ServiceError) {
	ret := _m.Called(fileName, uploader, uploadedViaSharedLink, data)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *primitive.ObjectID
	var r1 utils.ServiceError
	if rf, ok := ret.Get(0).(func(string, *primitive.ObjectID, bool, *io.ReadCloser) (*primitive.ObjectID, utils.ServiceError)); ok {
		return rf(fileName, uploader, uploadedViaSharedLink, data)
	}
	if rf, ok := ret.Get(0).(func(string, *primitive.ObjectID, bool, *io.ReadCloser) *primitive.ObjectID); ok {
		r0 = rf(fileName, uploader, uploadedViaSharedLink, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*primitive.ObjectID)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *primitive.ObjectID, bool, *io.ReadCloser) utils.ServiceError); ok {
		r1 = rf(fileName, uploader, uploadedViaSharedLink, data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.ServiceError)
		}
	}

	return r0, r1
}

// Delete provides a mock function with given fields: mediaId
func (_m *MediaService) Delete(mediaId *primitive.ObjectID) utils.ServiceError {
	ret := _m.Called(mediaId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 utils.ServiceError
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) utils.ServiceError); ok {
		r0 = rf(mediaId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(utils.ServiceError)
		}
	}

	return r0
}

// GetAllSharedWithUser provides a mock function with given fields: userId
func (_m *MediaService) GetAllSharedWithUser(userId *primitive.ObjectID) ([]model.UserMediaAccess, utils.ServiceError) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetAllSharedWithUser")
	}

	var r0 []model.UserMediaAccess
	var r1 utils.ServiceError
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) ([]model.UserMediaAccess, utils.ServiceError)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) []model.UserMediaAccess); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserMediaAccess)
		}
	}

	if rf, ok := ret.Get(1).(func(*primitive.ObjectID) utils.ServiceError); ok {
		r1 = rf(userId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.ServiceError)
		}
	}

	return r0, r1
}

// GetAllUploadedByUser provides a mock function with given fields: userId
func (_m *MediaService) GetAllUploadedByUser(userId *primitive.ObjectID) ([]model.Media, utils.ServiceError) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUploadedByUser")
	}

	var r0 []model.Media
	var r1 utils.ServiceError
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) ([]model.Media, utils.ServiceError)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) []model.Media); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Media)
		}
	}

	if rf, ok := ret.Get(1).(func(*primitive.ObjectID) utils.ServiceError); ok {
		r1 = rf(userId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.ServiceError)
		}
	}

	return r0, r1
}

// GetById provides a mock function with given fields: mediaId
func (_m *MediaService) GetById(mediaId *primitive.ObjectID) (*model.Media, utils.ServiceError) {
	ret := _m.Called(mediaId)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *model.Media
	var r1 utils.ServiceError
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) (*model.Media, utils.ServiceError)); ok {
		return rf(mediaId)
	}
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) *model.Media); ok {
		r0 = rf(mediaId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Media)
		}
	}

	if rf, ok := ret.Get(1).(func(*primitive.ObjectID) utils.ServiceError); ok {
		r1 = rf(mediaId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.ServiceError)
		}
	}

	return r0, r1
}

// GetData provides a mock function with given fields: storageFileName, compressed
func (_m *MediaService) GetData(storageFileName string, compressed bool) (*string, []byte, utils.ServiceError) {
	ret := _m.Called(storageFileName, compressed)

	if len(ret) == 0 {
		panic("no return value specified for GetData")
	}

	var r0 *string
	var r1 []byte
	var r2 utils.ServiceError
	if rf, ok := ret.Get(0).(func(string, bool) (*string, []byte, utils.ServiceError)); ok {
		return rf(storageFileName, compressed)
	}
	if rf, ok := ret.Get(0).(func(string, bool) *string); ok {
		r0 = rf(storageFileName, compressed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool) []byte); ok {
		r1 = rf(storageFileName, compressed)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(string, bool) utils.ServiceError); ok {
		r2 = rf(storageFileName, compressed)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(utils.ServiceError)
		}
	}

	return r0, r1, r2
}

// GetMetaData provides a mock function with given fields: mediaId
func (_m *MediaService) GetMetaData(mediaId *primitive.ObjectID) (*model.MetaData, utils.ServiceError) {
	ret := _m.Called(mediaId)

	if len(ret) == 0 {
		panic("no return value specified for GetMetaData")
	}

	var r0 *model.MetaData
	var r1 utils.ServiceError
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) (*model.MetaData, utils.ServiceError)); ok {
		return rf(mediaId)
	}
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) *model.MetaData); ok {
		r0 = rf(mediaId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MetaData)
		}
	}

	if rf, ok := ret.Get(1).(func(*primitive.ObjectID) utils.ServiceError); ok {
		r1 = rf(mediaId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.ServiceError)
		}
	}

	return r0, r1
}

// IsInAlbum provides a mock function with given fields: mediaId, albumId
func (_m *MediaService) IsInAlbum(mediaId *primitive.ObjectID, albumId *primitive.ObjectID) bool {
	ret := _m.Called(mediaId, albumId)

	if len(ret) == 0 {
		panic("no return value specified for IsInAlbum")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID, *primitive.ObjectID) bool); ok {
		r0 = rf(mediaId, albumId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewMediaService creates a new instance of MediaService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMediaService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MediaService {
	mock := &MediaService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
