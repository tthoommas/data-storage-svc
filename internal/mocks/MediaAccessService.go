// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	utils "data-storage-svc/internal/utils"
)

// MediaAccessService is an autogenerated mock type for the MediaAccessService type
type MediaAccessService struct {
	mock.Mock
}

// CanView provides a mock function with given fields: userId, mediaId
func (_m *MediaAccessService) CanView(userId *primitive.ObjectID, mediaId *primitive.ObjectID) bool {
	ret := _m.Called(userId, mediaId)

	if len(ret) == 0 {
		panic("no return value specified for CanView")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID, *primitive.ObjectID) bool); ok {
		r0 = rf(userId, mediaId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GrantAccess provides a mock function with given fields: userId, mediaId
func (_m *MediaAccessService) GrantAccess(userId *primitive.ObjectID, mediaId *primitive.ObjectID) utils.ServiceError {
	ret := _m.Called(userId, mediaId)

	if len(ret) == 0 {
		panic("no return value specified for GrantAccess")
	}

	var r0 utils.ServiceError
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID, *primitive.ObjectID) utils.ServiceError); ok {
		r0 = rf(userId, mediaId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(utils.ServiceError)
		}
	}

	return r0
}

// RevokeAll provides a mock function with given fields: mediaId
func (_m *MediaAccessService) RevokeAll(mediaId *primitive.ObjectID) utils.ServiceError {
	ret := _m.Called(mediaId)

	if len(ret) == 0 {
		panic("no return value specified for RevokeAll")
	}

	var r0 utils.ServiceError
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) utils.ServiceError); ok {
		r0 = rf(mediaId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(utils.ServiceError)
		}
	}

	return r0
}

// NewMediaAccessService creates a new instance of MediaAccessService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMediaAccessService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MediaAccessService {
	mock := &MediaAccessService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
