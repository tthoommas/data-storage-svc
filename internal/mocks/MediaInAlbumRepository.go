// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	model "data-storage-svc/internal/model"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MediaInAlbumRepository is an autogenerated mock type for the MediaInAlbumRepository type
type MediaInAlbumRepository struct {
	mock.Mock
}

// AddMediaToAlbum provides a mock function with given fields: mediaInAlbum
func (_m *MediaInAlbumRepository) AddMediaToAlbum(mediaInAlbum *model.MediaInAlbum) error {
	ret := _m.Called(mediaInAlbum)

	if len(ret) == 0 {
		panic("no return value specified for AddMediaToAlbum")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.MediaInAlbum) error); ok {
		r0 = rf(mediaInAlbum)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsInAlbum provides a mock function with given fields: mediaId, albumId
func (_m *MediaInAlbumRepository) IsInAlbum(mediaId *primitive.ObjectID, albumId *primitive.ObjectID) bool {
	ret := _m.Called(mediaId, albumId)

	if len(ret) == 0 {
		panic("no return value specified for IsInAlbum")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID, *primitive.ObjectID) bool); ok {
		r0 = rf(mediaId, albumId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ListAllMedias provides a mock function with given fields: albumId
func (_m *MediaInAlbumRepository) ListAllMedias(albumId *primitive.ObjectID) ([]model.MediaInAlbum, error) {
	ret := _m.Called(albumId)

	if len(ret) == 0 {
		panic("no return value specified for ListAllMedias")
	}

	var r0 []model.MediaInAlbum
	var r1 error
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) ([]model.MediaInAlbum, error)); ok {
		return rf(albumId)
	}
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) []model.MediaInAlbum); ok {
		r0 = rf(albumId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.MediaInAlbum)
		}
	}

	if rf, ok := ret.Get(1).(func(*primitive.ObjectID) error); ok {
		r1 = rf(albumId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveMediaFromAlbum provides a mock function with given fields: albumId, mediaId
func (_m *MediaInAlbumRepository) RemoveMediaFromAlbum(albumId *primitive.ObjectID, mediaId *primitive.ObjectID) error {
	ret := _m.Called(albumId, mediaId)

	if len(ret) == 0 {
		panic("no return value specified for RemoveMediaFromAlbum")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID, *primitive.ObjectID) error); ok {
		r0 = rf(albumId, mediaId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveMediaFromAllAlbums provides a mock function with given fields: mediaId
func (_m *MediaInAlbumRepository) RemoveMediaFromAllAlbums(mediaId *primitive.ObjectID) error {
	ret := _m.Called(mediaId)

	if len(ret) == 0 {
		panic("no return value specified for RemoveMediaFromAllAlbums")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) error); ok {
		r0 = rf(mediaId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnlinkAlbumFromAllMedias provides a mock function with given fields: albumId
func (_m *MediaInAlbumRepository) UnlinkAlbumFromAllMedias(albumId *primitive.ObjectID) error {
	ret := _m.Called(albumId)

	if len(ret) == 0 {
		panic("no return value specified for UnlinkAlbumFromAllMedias")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*primitive.ObjectID) error); ok {
		r0 = rf(albumId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMediaInAlbumRepository creates a new instance of MediaInAlbumRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMediaInAlbumRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MediaInAlbumRepository {
	mock := &MediaInAlbumRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
