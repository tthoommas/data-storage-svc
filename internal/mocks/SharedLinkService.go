// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	model "data-storage-svc/internal/model"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	time "time"

	utils "data-storage-svc/internal/utils"
)

// SharedLinkService is an autogenerated mock type for the SharedLinkService type
type SharedLinkService struct {
	mock.Mock
}

// Create provides a mock function with given fields: albumId, createdBy, expirationDate, canEdit
func (_m *SharedLinkService) Create(albumId primitive.ObjectID, createdBy primitive.ObjectID, expirationDate time.Time, canEdit bool) (*model.SharedLink, utils.ServiceError) {
	ret := _m.Called(albumId, createdBy, expirationDate, canEdit)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.SharedLink
	var r1 utils.ServiceError
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, primitive.ObjectID, time.Time, bool) (*model.SharedLink, utils.ServiceError)); ok {
		return rf(albumId, createdBy, expirationDate, canEdit)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, primitive.ObjectID, time.Time, bool) *model.SharedLink); ok {
		r0 = rf(albumId, createdBy, expirationDate, canEdit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SharedLink)
		}
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID, primitive.ObjectID, time.Time, bool) utils.ServiceError); ok {
		r1 = rf(albumId, createdBy, expirationDate, canEdit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.ServiceError)
		}
	}

	return r0, r1
}

// Delete provides a mock function with given fields: sharedLinkId
func (_m *SharedLinkService) Delete(sharedLinkId primitive.ObjectID) utils.ServiceError {
	ret := _m.Called(sharedLinkId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 utils.ServiceError
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) utils.ServiceError); ok {
		r0 = rf(sharedLinkId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(utils.ServiceError)
		}
	}

	return r0
}

// GetByToken provides a mock function with given fields: token
func (_m *SharedLinkService) GetByToken(token string) (*model.SharedLink, utils.ServiceError) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for GetByToken")
	}

	var r0 *model.SharedLink
	var r1 utils.ServiceError
	if rf, ok := ret.Get(0).(func(string) (*model.SharedLink, utils.ServiceError)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *model.SharedLink); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SharedLink)
		}
	}

	if rf, ok := ret.Get(1).(func(string) utils.ServiceError); ok {
		r1 = rf(token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.ServiceError)
		}
	}

	return r0, r1
}

// List provides a mock function with given fields: albumId
func (_m *SharedLinkService) List(albumId primitive.ObjectID) ([]model.SharedLink, utils.ServiceError) {
	ret := _m.Called(albumId)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []model.SharedLink
	var r1 utils.ServiceError
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) ([]model.SharedLink, utils.ServiceError)); ok {
		return rf(albumId)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) []model.SharedLink); ok {
		r0 = rf(albumId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.SharedLink)
		}
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID) utils.ServiceError); ok {
		r1 = rf(albumId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(utils.ServiceError)
		}
	}

	return r0, r1
}

// Update provides a mock function with given fields: sharedLinkId, canEdit
func (_m *SharedLinkService) Update(sharedLinkId primitive.ObjectID, canEdit bool) utils.ServiceError {
	ret := _m.Called(sharedLinkId, canEdit)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 utils.ServiceError
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, bool) utils.ServiceError); ok {
		r0 = rf(sharedLinkId, canEdit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(utils.ServiceError)
		}
	}

	return r0
}

// NewSharedLinkService creates a new instance of SharedLinkService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSharedLinkService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SharedLinkService {
	mock := &SharedLinkService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
